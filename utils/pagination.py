# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import Pagination as PaginationConfig

class Paginator:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""

    def __init__(self):
        self.items_per_page = PaginationConfig.TASKS_PER_PAGE
        self.max_buttons = PaginationConfig.MAX_PAGE_BUTTONS

    async def show_page(self, message, tasks, page=1, filters=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞—á–∞–º–∏
        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        :param tasks: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        :param filters: –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è callback_data)
        :return: None
        """
        total_pages = (len(tasks) + self.items_per_page - 1) // self.items_per_page
        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * self.items_per_page
        end_idx = start_idx + self.items_per_page
        page_tasks = tasks[start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = self._generate_page_text(page, total_pages, filters)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = self._generate_page_keyboard(page_tasks, page, total_pages, filters)

        if hasattr(message, 'edit_text'):
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.reply_text(text, reply_markup=keyboard)

    def _generate_page_text(self, page, total_pages, filters):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n"
        
        if filters:
            filter_text = []
            if filters.get('status'):
                filter_text.append(f"—Å—Ç–∞—Ç—É—Å: {filters['status']}")
            if filters.get('period'):
                filter_text.append(f"–ø–µ—Ä–∏–æ–¥: {filters['period']}")
            if filter_text:
                text += "–§–∏–ª—å—Ç—Ä—ã: " + ", ".join(filter_text) + "\n"
        
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        return text

    def _generate_page_keyboard(self, tasks, current_page, total_pages, filters):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
        for task in tasks:
            keyboard.append([
                InlineKeyboardButton(
                    f"#{task[0]} {task[1][:30]}... ({task[2]})",
                    callback_data=f"task_{task[0]}")
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        filter_prefix = self._get_filter_prefix(filters)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if current_page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è", 
                    callback_data=f"{filter_prefix}page_{current_page - 1}")
            )
        
        # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_buttons.append(
            InlineKeyboardButton(
                f"{current_page}/{total_pages}", 
                callback_data="ignore")
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if current_page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    "‚û°Ô∏è", 
                    callback_data=f"{filter_prefix}page_{current_page + 1}")
            )
        
        keyboard.append(pagination_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        additional_buttons = []
        additional_buttons.append(
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")
        )
        additional_buttons.append(
            InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="filter_status")
        )
        keyboard.append(additional_buttons)
        
        return InlineKeyboardMarkup(keyboard)

    def _get_filter_prefix(self, filters):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è callback_data —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        if not filters:
            return ""
        
        prefix = []
        if filters.get('status'):
            prefix.append(f"status_{filters['status']}")
        if filters.get('period'):
            prefix.append(f"period_{filters['period']}")
        
        return "_".join(prefix) + "_" if prefix else ""