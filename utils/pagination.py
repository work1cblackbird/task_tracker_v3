from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import Config

async def show_paginated_tasks(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    tasks: list,
    page: int = 1,
    status_filter: str = None,
    items_per_page: int = 5
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞.
        tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ë–î.
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1).
        status_filter: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É ('new', 'in_progress', 'done').
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    if not tasks:
        await update.message.reply_text("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if status_filter and status_filter.lower() in Config.TASK_STATUSES:
        tasks = [task for task in tasks if task["status"] == status_filter]

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_pages = (len(tasks) // items_per_page) + (1 if len(tasks) % items_per_page != 0 else 0)
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    paginated_tasks = tasks[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n"
    if status_filter:
        message_text += f"–§–∏–ª—å—Ç—Ä: {status_filter}\n"
    message_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    for task in paginated_tasks:
        message_text += (
            f"#{task['id']} ‚Äî {task['description']}\n"
            f"–°—Ç–∞—Ç—É—Å: {task['status']} | –ê–≤—Ç–æ—Ä: @{task['created_by']}\n"
            f"–î–∞—Ç–∞: {task['created_at']}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{page}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    keyboard.append([InlineKeyboardButton("üîÑ –§–∏–ª—å—Ç—Ä—ã", callback_data="open_filters")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup
        )

async def handle_pagination_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    tasks: list
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    query = update.callback_query
    data = query.data

    if data.startswith("prev_"):
        new_page = int(data.split("_")[1]) - 1
    elif data.startswith("next_"):
        new_page = int(data.split("_")[1]) + 1
    else:
        return

    await show_paginated_tasks(
        update=update,
        context=context,
        tasks=tasks,
        page=new_page,
        status_filter=context.user_data.get("current_filter")
    )