# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
–¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ADMIN
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes
from config import BotConfig, Roles
from database import db
from utils.keyboards import get_back_button

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class AdminHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    def __init__(self, application):
        self.application = application
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CallbackQueryHandler(self.promote_user_handler, pattern="^promote_"),
            CallbackQueryHandler(self.demote_user_handler, pattern="^demote_"),
            CallbackQueryHandler(self.delete_user_handler, pattern="^delete_user_"),
            CallbackQueryHandler(self.admin_tasks_handler, pattern="^admin_tasks$"),
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    async def _check_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        if user.username != BotConfig.ADMIN_USERNAME:
            await update.callback_query.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
            return False
        return True

    async def promote_user_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        if not await self._check_admin(update):
            return

        username = update.callback_query.data.split("_")[1]
        db.update_user_role(username, Roles.MANAGER)
        
        await update.callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
        await self._show_user_management(update)

    async def demote_user_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not await self._check_admin(update):
            return

        username = update.callback_query.data.split("_")[1]
        db.update_user_role(username, Roles.USER)
        
        await update.callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        await self._show_user_management(update)

    async def delete_user_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not await self._check_admin(update):
            return

        username = update.callback_query.data.split("_")[2]
        if username == BotConfig.ADMIN_USERNAME:
            await update.callback_query.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        await update.callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω")
        await self._show_user_management(update)

    async def admin_tasks_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        if not await self._check_admin(update):
            return

        keyboard = [
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á", callback_data="view_all_tasks")],
            get_back_button()
        ]
        
        await update.callback_query.edit_message_text(
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_user_management(self, update: Update):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        users = db.get_all_users()
        keyboard = []
        
        for user in users:
            if user[1] == BotConfig.ADMIN_USERNAME:
                continue
                
            role = "üë§" if user[2] == Roles.USER else "üëî"
            buttons = []
            
            if user[2] == Roles.USER:
                buttons.append(InlineKeyboardButton(
                    f"{role} –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", 
                    callback_data=f"promote_{user[1]}"))
            else:
                buttons.append(InlineKeyboardButton(
                    f"{role} –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                    callback_data=f"demote_{user[1]}"))
                
            buttons.append(InlineKeyboardButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"delete_user_{user[1]}"))
                
            keyboard.append(buttons)
        
        keyboard.append([get_back_button()])
        
        await update.callback_query.edit_message_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

def register_admin_handlers(application):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    AdminHandlers(application)