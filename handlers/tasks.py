# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from config import BotConfig, TaskStatuses
from database import db
from utils.keyboards import (
    get_main_menu_keyboard,
    get_task_keyboard,
    get_back_button,
    get_filters_keyboard,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class TaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏"""

    def __init__(self, application):
        self.application = application
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
        handlers = [
            CommandHandler("tasks", self.list_tasks_handler),
            CallbackQueryHandler(self.create_task_handler, pattern="^create_task$"),
            CallbackQueryHandler(self.task_detail_handler, pattern="^task_"),
            CallbackQueryHandler(self.change_status_handler, pattern="^(take|complete|reopen)_"),
            CallbackQueryHandler(self.delete_task_handler, pattern="^delete_"),
            CallbackQueryHandler(self.filter_tasks_handler, pattern="^filter_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_task_handler),
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    async def list_tasks_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        user = update.effective_user
        is_admin = user.username == BotConfig.ADMIN_USERNAME
        
        if is_admin:
            tasks = db.get_all_tasks()
        else:
            tasks = db.get_user_tasks(user.username)

        if not tasks:
            await update.message.reply_text("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        keyboard = []
        for task in tasks:
            keyboard.append([
                InlineKeyboardButton(
                    f"#{task[0]} {task[1][:30]}... ({TaskStatuses.get_status_name(task[2])})",
                    callback_data=f"task_{task[0]}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task"),
            InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="filter_status")
        ])

        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def create_task_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        context.user_data["awaiting_task"] = True
        await update.callback_query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup([[get_back_button()]])
        )

    async def save_task_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if "awaiting_task" not in context.user_data:
            return

        description = update.message.text
        user = update.effective_user
        task_id = db.add_task(description, user.username)

        context.user_data.pop("awaiting_task", None)
        await update.message.reply_text(
            f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_main_menu_keyboard(user.username)
        )

    async def task_detail_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏"""
        task_id = int(update.callback_query.data.split("_")[1])
        task = db.get_task(task_id)

        if not task:
            await update.callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        comments = db.get_task_comments(task_id)
        comments_text = "\n".join(
            [f"{i+1}. @{c[1]}: {c[2]}" for i, c in enumerate(comments)]
        ) if comments else "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        text = (
            f"–ó–∞–¥–∞—á–∞ #{task[0]}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}\n"
            f"–°—Ç–∞—Ç—É—Å: {TaskStatuses.get_status_name(task[2])}\n"
            f"–ê–≤—Ç–æ—Ä: @{task[3]}\n"
            f"–î–∞—Ç–∞: {task[4]}\n\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments_text}"
        )

        keyboard = get_task_keyboard(task[2], update.effective_user.username, task_id)
        await update.callback_query.message.edit_text(
            text,
            reply_markup=keyboard
        )

    async def change_status_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        action, task_id = update.callback_query.data.split("_")
        task_id = int(task_id)
        user = update.effective_user

        if action == "take":
            new_status = TaskStatuses.IN_PROGRESS
        elif action == "complete":
            new_status = TaskStatuses.DONE
        else:  # reopen
            new_status = TaskStatuses.IN_PROGRESS

        db.update_task_status(task_id, new_status)
        await update.callback_query.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {TaskStatuses.get_status_name(new_status)}")
        await self.task_detail_handler(update, context)

    async def delete_task_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_id = int(update.callback_query.data.split("_")[1])
        db.delete_task(task_id)
        await update.callback_query.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        await update.callback_query.message.delete()

    async def filter_tasks_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á"""
        filter_type = update.callback_query.data.split("_")[1]
        keyboard = get_filters_keyboard(filter_type)
        await update.callback_query.message.edit_reply_markup(reply_markup=keyboard)

def register_task_handlers(application):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
    TaskHandlers(application)